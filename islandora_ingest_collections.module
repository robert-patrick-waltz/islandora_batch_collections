<?php

namespace edu\utk\islandora\ingest\collections;
/**
 * @file
 * The Ingest Collection Module .
 */
class IslandoraSimpleDSVCollectionPopulator 
{
    private bool $doIslandoraIngestDsvNode = FALSE;
    private IslandoraTuque $tuque;
    public function __construct(bool $islandoraIngestNode = FALSE) {
        $this->doIslandoraIngestDsvNode = $islandoraIngestNode;
        this->tuque = new \IslandoraTuque();
    }
    /**
     * Ingest an Islandora collection object.
     *
     * @param array $collection_data
     *   The configuration data for one CONTENTdm collection.
     */
    public function islandoraIngestCollection(SimpleDSVCollection $dsvCollection) 
    {
        try {
            
            $repository = $tuque->repository;
            $collection_object = $repository->constructObject($dsvCollection->getPid());
            $collection_object->label = $dsvCollection->getLabel();


            // Add the COLLECTION_POLICY ds.
            $coll_policy_datastream = $collection_object->constructDatastream('COLLECTION_POLICY', 'M');
            $coll_policy_datastream->label = 'Collection policy';
            $coll_policy_datastream->mimetype = 'text/xml';
            $coll_policy_datastream->setContentFromString($dsvCollection->getCollectionPolicyXml());
            $collection_object->ingestDatastream($coll_policy_datastream);

            // Add the MODS ds.
            $mods_datastream = $collection_object->constructDatastream('MODS', 'M');
            $mods_datastream->label = 'MODS Record';
            $mods_datastream->mimetype = 'application/xml';
            $mods_datastream->setContentFromString($dsvCollection->getModsXml());
            $collection_object->ingestDatastream($mods_datastream);

            // Add THUMBNAIL ds. If we don't have thumbnails in the input data,
            // use the image provided by the collection solution pack.
            $thumbnail_filepath = $this->getCompleteThumbnailPath($dsvCollection->getThumbnailFilepath());
            $tn_datastream = $collection_object->constructDatastream('TN', 'M');

            // Dectect the mime type of the thumbnail
            $tn_mime_detector = new \MimeDetect();
            $tn_datastream->mimetype = $tn_mime_detector->getMimetype($thumbnail_filepath));
            $tn_datastream->label = 'Thumbnail';
            $tn_datastream->setContentFromFile($thumbnail_filepath);
            $collection_object->ingestDatastream($tn_datastream);

            // Add relationships.
            $rels = $collection_object->relationships;
            $rels->add('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection', $parent, FALSE);
            $rels->add('info:fedora/fedora-system:def/model#', 'hasModel', 'islandora:collectionCModel', FALSE);

            $repository->ingestObject($collection_object);
            \drupal_set_message(t('Ingested Islandora collection object %t (PID %p).',
              array('%t' => $collection_object->label, '%p' => $collection_object->id)));
            \watchdog('islandora_migrate_cdm_collections', 'Ingested Islandora collection object %t (PID %p).',
              array('%t' => $collection_object->label, '%p' => $collection_object->id), WATCHDOG_INFO);
        } catch (Exception $e) {
          \drupal_set_message(t('Error ingesting Islandora collection object %t (PID %p).',
            array('%t' => $collection_object->title, '%p' => $collection_object->id), 'error'));
          \watchdog('islandora_migrate_cdm_collections', 'Error ingesting Islandora collection object %t (PID %p).',
            array('%t' => $label, '%p' => $collection_object->id), WATCHDOG_ERROR);
        }
        if ($this->doIslandoraIngestDsvNode) {
            $this->islandoraIngestDsvNode(dsvCollection)
        }
    }

    /**
     * Ingest a Drupal node to correspond to an Islandora collection object.
     *
     * All content types must have the following fields:
     *   -title
     *   -cdm_alias (Text/Text field)
     *   -description (Long text/Textarea (multiple rows))
     *   -thumbnail (Image/Image)
     *   -object_id (Text/Text field)
     *
     * @param string $input_path
     *   The absolute filesystem path to the tab-separated-value file generated by
     *   get_collection_data.php.
     * @param array $collection_data
     *   The configuration data for one CONTENTdm collection.
     * @param string $content_type
     *   The Drupal content type to use for the node.
     * @param string $namespace
     *   The value of the --namespace Drush option.
     */
    private function islandoraIngestDsvNode(SimpleDSVCollection $dsvCollection) 
    {
       $thumbnail_filepath = $this->getCompleteThumbnailPath($dsvCollection->getThumbnailFilepath());

        if (file_exists($thumbnail_filepath)) {
            unset($file);
            $file = \file_save_data(file_get_contents($thumbnail_filepath),
              \file_default_scheme() . '://' . basename($thumbnail_filepath));
            if ($file) {
                $file->status = FILE_STATUS_PERMANENT;
                $file->display = 1;
                $file->description = basename($thumbnail_filepath);
                $file->uid = 1;
            }
        }

        // Create the node object.
        $node = new \stdClass();
        $node->title = trim($collection_data[1]);
        $node->type = $content_type;
        $node->status = 1;
        $node->promote = 0;
        $node->sticky = 0;
        $node->language = LANGUAGE_NONE;
        $node->uid = 1;
        if (array_key_exists(3, $collection_data)) {
          $node->field_thumbnail[LANGUAGE_NONE][0] = (array) $file;
        }

        $node->field_pid[LANGUAGE_NONE][0]['value'] = $dsvCollection->getPid() ;

        $node->field_cdm_alias[LANGUAGE_NONE][0]['value'] = $dsvCollection->getLabel();
        
        if (array_key_exists(2, $collection_data)) {
          $node->field_description[LANGUAGE_NONE][0]['value'] = $dsvCollection->getModsDescription();
          $node->field_description[LANGUAGE_NONE][0]['format'] = 'full_html';
        }

        // Save the node.
        if ($node->title) {
          $node = \node_submit($node);
          if ($node->validated) {
            \node_save($node);
          }
        }

        print "Collection node with title $node->title created\n";
    }
    /**
     * The thumbnail_filepath may not be set, or if set, it may be incorrectly
     * formated. If thumbnail_filepath cannot be resolved, then return
     * the Islandora folder image
     * 
     * @param $thumbnail_filepath
     *   Filepath to the thumbnail
     * @return $thumbnail_filepath 
     *   Filepath to the thumbnail
     */
    private getCompleteThumbnailPath($thumbnail_filepath) {
        if ((strlen($thumbnail_filepath) == 0) || !file_exists($thumbnail_filepath) || !is_file($thumbnail_filepath)) {
            $thumbnail_filepath = \drupal_get_path('module', 'islandora_basic_collection') .
              '/images/folder.png';
        }
        return $thumbnail_filepath;
    }
    
    /**
     * Do some validation checks on the content type.
     * 
     */
 
    private validateDrupalContentType($content_type) 
    {
        // Replace all non letters, numbers, and spaces with _ prior to node_type_load(),
        // same as Drupal core does, in case the user copies the machine name from the URL,
        // which uses - instead of _.  
        $content_type = preg_replace('/[^a-zA-Z0-9]+/', '_', $content_type);
        if ($content_type) {
            if (!$type = \node_type_load($content_type)) {
              return drush_set_error(dt("Can't find the content type @type.",
                array('@type' => $content_type)));
            }

            if (!$type->has_title) {
              return drush_set_error(dt("Content type @type has no title field.",
                array('@type' => $content_type)));
            }

            $required_fields = array(
              'field_description',
              'field_cdm_alias',
              'field_thumbnail',
              'field_pid',
            );
            $fields = \field_info_instances('node', $content_type);
            foreach ($required_fields as $required_field) {
              if (!array_key_exists($required_field, $fields)) {
                return drush_set_error(dt("Content type @type has no @field field.",
                  array('@type' => $content_type, '@field' => $required_field)));
              }
            }
        }
    }
}
